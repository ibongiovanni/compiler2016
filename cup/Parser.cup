package Example;

import java_cup.runtime.*;

parser code {:
    public static void main(String args[]) throws Exception {
		ComplexSymbolFactory sf = new ComplexSymbolFactory();
		if (args.length==0) {
			new Parser(new Scanner(System.in,sf),sf).parse();
		}
		else {
			new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
		}

		System.out.println("\n\nParsing ended");
    }

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, LBRACE, RBRACE;

terminal 			BOOL, BREAK, CLASS, CONTINUE, ELSE, FLOAT, FOR, IF, INTEGER, RETURN, VOID, WHILE, EXTERN;
terminal Boolean	BOOL_LIT;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal Object		ID;

/* Non terminals */
non terminal            expr_list;
non terminal 			expr;      // used to store evaluated subexpressions

non terminal 	program;
non terminal 	class_dec;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;

/* The grammar rules */

/*goal*/
program 	::=  program class_dec	{:System.out.println("More than one class");:}	//More than one class 
			|	 class_dec			{:System.out.println("One single class");:}	//One single class
			;

class_dec	::=  CLASS ID LBRACE RBRACE
			//|	 CLASS ID LBRACE RBRACE
			;

